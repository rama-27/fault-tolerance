user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    keepalive_timeout 65;

    # Upstream for LocalStack with health checks
    upstream localstack {
        server localstack:4566 max_fails=3 fail_timeout=5s;
        # Health check (optional, but recommended)
        # This assumes LocalStack has a health check endpoint.  Adjust if needed.
        # health_check uri=/health;
    }

    # Upstream for Azurite Blob Service with health checks
    upstream azurite_blob {
        server azurite:10000 max_fails=3 fail_timeout=5s;
        # Health check (optional, but recommended)
        # This assumes Azurite has a health check endpoint.  Adjust if needed.
        # health_check uri=/health;
    }

    # Map to determine which upstream to use
    map $request_uri $chosen_upstream {
        default localstack; # Default to LocalStack

        ~^/azure/blob/ azurite_blob; # If URI starts with /azure/blob, use Azurite
    }


    server {
        listen 80;
        server_name localhost;

        # Route requests based on the chosen upstream
        location / {
            proxy_pass http://$chosen_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 2s; # Short timeout
            proxy_read_timeout 5s;
            proxy_send_timeout 5s;
        }


        # Error handling (optional)
        error_page 502 503 504 /unavailable.html;

        location /unavailable.html {
            return 503 "Service temporarily unavailable.  Trying alternative...";
            # You could also serve a static HTML page here
        }
    }
}
